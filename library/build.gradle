plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.androidx.room)
    alias(libs.plugins.maven.publish)
}

group = "io.syslogic"
version = libs.versions.app.version.name.get()
base.archivesName = "androidx-github"

if (! pluginManager.hasPlugin("io.syslogic.gpr.maintenance")) {
    // apply plugin: "io.syslogic.gpr.maintenance"
}

android {
    namespace = "io.syslogic.github.api"
    buildToolsVersion = libs.versions.android.build.tools.get()
    compileSdk = Integer.parseInt(libs.versions.android.compile.sdk.get())
    defaultConfig {
        minSdk = Integer.parseInt(libs.versions.android.min.sdk.get())
        targetSdk = Integer.parseInt(libs.versions.android.target.sdk.get())
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFile("${project.rootDir}/proguard/consumer.pro")
    }

    sourceSets.main.java.srcDirs = [ "src/main/java" ]

    // Room Plugin
    room {
        schemaDirectory("${rootDir}/schema")
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    buildFeatures {
        buildConfig = true
        dataBinding = true
    }

    buildTypes {
        debug {
            // it breaks the data-binding, eg. when running ./gradlew :library:publishToMavenLocal
            testCoverageEnabled = false
            minifyEnabled = false
        }
        release {
            minifyEnabled = false
        }
    }

    lint {
        checkAllWarnings = true
        warningsAsErrors = true
        abortOnError = false
        showAll = false
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {

    // Material Design Components
    implementation(libs.material.design)

    // Annotations
    implementation(libs.androidx.annotation)

    // AppCompat
    implementation(libs.androidx.appcompat)

    // Data-Binding Runtime
    implementation(libs.androidx.databinding)

    // Room
    annotationProcessor(libs.androidx.room.compiler)
    androidTestAnnotationProcessor(libs.androidx.room.compiler)
    testImplementation(libs.androidx.room.testing)
    api(libs.androidx.room.runtime)
    api(libs.androidx.room.paging)

    // Retrofit2
    implementation(libs.gson)
    implementation(libs.bundles.retrofit) {
        exclude(group: "com.google.code.gson", module: "gson")
    }

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.test.junit)
}

// Gradle 9.0 deprecation fix
Configuration implCls = configurations.create("implCls", {
    extendsFrom(configurations.implementation)
    canBeResolved = true
})

tasks.register("javadoc", Javadoc) {

    title = "GitHub API ${android.defaultConfig.versionName}"
    source = android.sourceSets.main.java.srcDirs
    destinationDir = project.file("build/outputs/javadoc")

    classpath = files(new File("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"))
    android.getBootClasspath().forEach{ classpath += fileTree(it) }
    classpath += fileTree(dir: project.file("build/tmp/aarsToJars/").absolutePath)
    classpath += implCls
    exclude("**/BuildConfig.java", "**/R.java", "**/*.kt")
    failOnError = false

    // options.verbose()
    // javadoc: warning - The code being documented uses modules but the packages
    // defined in https://developer.android.com/reference/ are in the unnamed module.
    options.links "https://docs.oracle.com/en/java/javase/17/docs/api/"
    options.linksOffline "https://developer.android.com/reference", "${android.sdkDirectory}/docs/reference"
    options.linkSource = true
    options.author = true

    onlyIf {
        project.file("build/intermediates/aar_main_jar").exists()
    }

    doFirst {

        // extract AAR files
        configurations.implCls
                .filter { it.name.endsWith(".aar") }
                .each { aar ->
                    copy {
                        from(zipTree(aar))
                        include("**/classes.jar")
                        into(project.file("build/tmp/aarsToJars/${aar.name.replace(".aar", "")}/"))
                    }
        }

        // provide JAR, which contains the generated data-binding classes
        def aarMain = project.file("build/intermediates/aar_main_jar")
        if (aarMain.exists()) {
            copy {
                from(aarMain)
                include("**/classes.jar")
                into(project.file("build/tmp/aarsToJars/aar_main_jar/"))
            }
        }
    }
    doLast {
        // delete temporary directory.
        delete project.fileTree("build/tmp/aarsToJars")
    }
}

tasks.register("javadocJar", Jar) {
    archiveClassifier.set("javadoc")
    from(javadoc.destinationDir)
    dependsOn(javadoc)
}

tasks.register("sourcesJar", Jar) {
    from(android.sourceSets.main.java.srcDirs)
    archiveClassifier.set("sources")
}

artifacts {
    archives(javadocJar)
    archives(sourcesJar)
}

afterEvaluate {

    publishing {
        publications {
            library(MavenPublication) {
                from(components["release"])
                groupId = "${group_id}"
                artifactId = "${artifact_id}"
                version = "${libs.versions.app.version.name.get()}"
                pom {
                    name = "${plugin_name}"
                    description = "${plugin_desc}"
                    url = "https://github.com/${github_handle}/${artifact_id}"
                    scm {
                        connection = "scm:git:git://github.com/${github_handle}/${artifact_id}.git"
                        developerConnection = "scm:git:ssh://github.com/${github_handle}/${artifact_id}.git"
                        url = "https://github.com/${github_handle}/${artifact_id}/"
                    }
                }
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/${project.ext.get("github_handle")}/${project.ext.get("artifact_id")}")
                if (System.getenv("GITHUB_ACTOR") != null && System.getenv("GITHUB_ACTOR") != null) {
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
            }
        }
    }
}

/** GitHub Package Registry. */
if (pluginManager.hasPlugin("io.syslogic.gpr.maintenance")) {
    gpr {
        groupId = project.ext.get("group_id")        // group
        packageName = project.ext.get("artifact_id") // repo
        listPackagesAfterPublish = false
        deleteOnConflict = true
        deleteLastVersion = false
        logHttp = false
        pageSize = 30
    }
}
