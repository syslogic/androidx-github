// :mobile build.gradle
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.androidx.navigation.safeargs)
    alias(libs.plugins.androidx.room)
}

/** Load API access-token from file `token.properties` */
if (rootProject.file('token.properties').exists()) {
    def apikeys = new Properties()
    def fis = new FileInputStream(rootProject.file('token.properties'))
    apikeys.load(fis)
    project.ext.set('accessToken', apikeys['accessToken'])
    fis.close()
} else {
    println "*** File `token.properties` is missing; the GitHub API may be rate-limited."
    println "*** The personal access token needs to be defined with an EditTextPreference."
    project.ext.set('accessToken', "")
}

base {
    String versionName = libs.versions.app.version.name.get()
    archivesName = "github_client_$versionName"
}

android {
    namespace = "io.syslogic.github"
    buildToolsVersion = libs.versions.android.build.tools.get()
    compileSdk = Integer.parseInt(libs.versions.android.compile.sdk.get())
    defaultConfig {
        minSdk = Integer.parseInt(libs.versions.android.min.sdk.get())
        targetSdk = Integer.parseInt(libs.versions.android.target.sdk.get())
        versionCode = Integer.parseInt(libs.versions.app.version.code.get())
        versionName = libs.versions.app.version.name.get()
        applicationId = "io.syslogic.github"
        //noinspection GroovyConstructorNamedArguments
        manifestPlaceholders = [ accessToken: "" ]
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        testBuildType = "debug"
        multiDexEnabled = true
    }

    room {
        schemaDirectory("${rootDir}/schema")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    sourceSets {
        androidTest {
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    buildFeatures {
        buildConfig = true
        dataBinding = true
    }

    signingConfigs {
        debug {
            storeFile new File("${System.properties['user.home']}/.android/debug.keystore")
            if (rootProject.file('keystore.properties').exists()) {
                storePassword rootProject.ext.get('debugKeystorePass')
                keyAlias rootProject.ext.get('debugKeyAlias')
                keyPassword rootProject.ext.get('debugKeyPass')
            }
        }
        release {
            storeFile new File("${System.properties['user.home']}/.android/release.keystore")
            if (rootProject.file('keystore.properties').exists()) {
                storePassword rootProject.ext.get('releaseKeystorePass')
                keyAlias rootProject.ext.get('releaseKeyAlias')
                keyPassword rootProject.ext.get('releaseKeyPass')
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix = ".debug"
            signingConfig = signingConfigs.debug
            //noinspection GroovyConstructorNamedArguments
            manifestPlaceholders = [ accessToken: "${accessToken}" ]
            pseudoLocalesEnabled = false
            testCoverageEnabled = true
            shrinkResources = false
            minifyEnabled = false
            jniDebuggable = true
            debuggable = true
        }
        release {
            signingConfig = signingConfigs.release
            //noinspection GroovyConstructorNamedArguments
            manifestPlaceholders = [ accessToken: "" ]
            proguardFile "${project.rootDir}/proguard/android.pro"
            proguardFile "${project.rootDir}/proguard/androidx.pro"
            proguardFile "${project.rootDir}/proguard/retrofit.pro"
            proguardFile "${project.rootDir}/proguard/window.pro"
            proguardFile "${project.rootDir}/proguard/mobile.pro"
            proguardFile "${project.rootDir}/proguard/jgit.pro"
            pseudoLocalesEnabled = false
            testCoverageEnabled = false
            shrinkResources = true
            minifyEnabled = true
            jniDebuggable = false
            debuggable = false
        }
    }

    lint {
        lintConfig = project.file('lint.xml')
        checkAllWarnings = true
        warningsAsErrors = true
        abortOnError = false
        showAll = false
    }
}

dependencies {

    api project(path: ':library')

    // Material Design Components
    implementation libs.material.design

    // Annotations
    implementation libs.androidx.annotation

    // Flexbox Layout
    implementation libs.flexbox

    // https://developer.android.com/jetpack/androidx/
    implementation libs.androidx.appcompat
    implementation libs.androidx.splashscreen
    implementation libs.androidx.recyclerview
    implementation libs.androidx.preference
    implementation libs.androidx.cardview

    // Navigation
    androidTestImplementation libs.androidx.navigation.testing
    implementation libs.androidx.navigation.fragment

    // Fragment
    androidTestImplementation libs.androidx.fragment.testing
    implementation libs.androidx.fragment

    // Room Runtime
    annotationProcessor libs.androidx.room.compiler
    testImplementation libs.androidx.room.testing
    implementation libs.androidx.room.runtime

    // Retrofit2
    implementation libs.gson
    implementation libs.retrofit
    implementation (libs.retrofit.gson.converter) {
        exclude group: "com.google.code.gson", module: "gson"
    }

    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation libs.jgit

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    // api "org.slf4j:slf4j-nop:$slf4j_version"
    api libs.slf4j

    // jUnit4
    testImplementation libs.junit

    // Required for connected tests.
    // https://mvnrepository.com/artifact/androidx.test/monitor
    debugImplementation libs.androidx.test.monitor

    // https://mvnrepository.com/artifact/androidx.test.ext
    androidTestImplementation libs.androidx.test.junit

    // https://mvnrepository.com/artifact/androidx.test
    // https://developer.android.com/jetpack/androidx/releases/test
    androidTestImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules

    // https://mvnrepository.com/artifact/androidx.test.uiautomator/uiautomator
    androidTestImplementation libs.androidx.test.uiautomator

    // Espresso
    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.androidx.test.espresso.web
    // androidTestImplementation "androidx.test.espresso:espresso-contrib:$androidx_test_espresso_version"
    // androidTestImplementation "androidx.test.espresso:espresso-intents:$androidx_test_espresso_version"
    // androidTestImplementation "androidx.test.espresso:espresso-accessibility:$androidx_test_espresso_version"
    // androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espresso_version"

    // The following dependency can be either "implementation" or "androidTestImplementation",
    // depending on whether you want it to appear on your APK's compile classpath or the test APK classpath.
    // androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$androidx_test_espresso_version"
}
