// root build.gradle
buildscript {
    ext {
        agp_version = '8.1.0'
        kotlin_version = '1.8.22'
        material_version = '1.9.0'
        appcompat_version = '1.6.1'
        annotation_version = '1.6.0'
        fragment_version = '1.6.1'
        nav_version = '2.6.0'
        room_version = '2.5.2'
        flexbox_version = '3.0.0'
        splash_version = '1.0.1'
        recyclerview_version = '1.3.1'
        preference_version = '1.2.1'
        cardview_version = '1.0.0'
        retrofit_version = '2.9.0'
        gson_version = '2.10.1'
        // DirCacheCheckout.java uses InputStream.transferTo() since 6.3; no such method on Android.
        jgit_version = '6.2.0.202206071550-r' // instead of 6.5.0.202303070854-r
        slf4j_version = '2.0.7'
        junit_version = '4.13.2'
        test_junit_version = '1.1.5'
        test_core_version = '1.5.0'
        test_monitor_version = '1.6.1'
        test_runner_version = '1.5.2'
        test_rules_version = '1.5.0'
        uiautomator_version = '2.2.0'
        espresso_version = '3.5.1'
    }
}

plugins {
    id 'com.android.application' version "$agp_version" apply false
    id 'com.android.library' version "$agp_version" apply false
    id 'androidx.navigation.safeargs' version "$nav_version" apply false
}

/** Version Settings, loaded from file `version.properties` */
def version = new Properties()
version.load(new FileInputStream(rootProject.file('version.properties')))
project.ext.set('applicationId', version['applicationId'])
project.ext.set('versionName', version['versionName'])
project.ext.set('versionCode', new Integer(version['versionCode']))

/** Build Configurations */
project.ext.set('archiveBuildTypes', ['debug', 'release'])

/** Load API access-token from file `token.properties` */
if(rootProject.file('token.properties').exists()) {
    def apikeys = new Properties()
    apikeys.load(new FileInputStream(rootProject.file('token.properties')))
    project.ext.set('accessToken', apikeys['accessToken'])
} else {
    println "*** File `token.properties` is missing; the GitHub API may be rate-limited."
    println "*** The personal access token needs to be defined with EditTextPreference."
    project.ext.set('accessToken', "")
}

/** Modules */
allprojects {

    /** Runtime JAR files in the classpath should have the same version. */
    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin') {
                List<String> list = ['kotlin-stdlib', 'kotlin-stdlib-jdk7', 'kotlin-stdlib-jdk8', 'kotlin-stdlib-common']
                if (list.contains(requested.name)) {
                    details.useVersion "$kotlin_version"
                }
            }
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }
}

// rootProject > clean
tasks.register('clean', Delete) {

    // delete build directories
    delete rootProject.buildDir
    delete project.buildDir

    // when task clean has finished
    doLast {

        // then recreate APK output directories
        mkdir("${project.buildDir}/outputs/apk")
        mkdir("${project.buildDir}/outputs/apk/debug")
        mkdir("${project.buildDir}/outputs/apk/release")
    }
}
