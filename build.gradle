// root build.gradle
buildscript {
    ext {
        android_gradle_plugin_version = '8.2.2'
        material_design_version = '1.11.0'
        kotlin_version = '1.9.21'
        retrofit_version = '2.9.0'
        gson_version = '2.10.1'
        junit_version = '4.13.2'
        flexbox_version = '3.0.0'

        // DirCacheCheckout.java uses InputStream.transferTo() since 6.3; no such method on Android.
        jgit_version = '6.2.0.202206071550-r' // instead of 6.5.0.202303070854-r
        slf4j_version = '2.0.9'

        androidx_appcompat_version = '1.6.1'
        androidx_annotation_version = '1.6.0'
        androidx_fragment_version = '1.6.2'
        androidx_navigation_version = '2.7.7'
        androidx_room_version = '2.6.1'
        androidx_splash_version = '1.0.1'
        androidx_recyclerview_version = '1.3.2'
        androidx_preference_version = '1.2.1'
        androidx_cardview_version = '1.0.0'

        androidx_test_junit_version = '1.1.5'
        androidx_test_core_version = '1.5.0'
        androidx_test_monitor_version = '1.6.1'
        androidx_test_runner_version = '1.5.2'
        androidx_test_rules_version = '1.5.0'
        androidx_test_uiautomator_version = '2.3.0'
        androidx_test_espresso_version = '3.5.1'
    }
}

plugins {
    id 'com.android.application' version "$android_gradle_plugin_version" apply false
    id 'com.android.library' version "$android_gradle_plugin_version" apply false
    id 'androidx.navigation.safeargs' version "$androidx_navigation_version" apply false
}

/** Version Settings, loaded from file `version.properties` */
def version = new Properties()
version.load(new FileInputStream(rootProject.file('version.properties')))
project.ext.set('versionCode', new Integer(version['versionCode']))
project.ext.set('versionName', version['versionName'])

/* JitPack: use tag as versionName. */
if (System.env.JITPACK) {
    project.ext.set('version_name', System.env.VERSION)
}

/** Build Configurations */
project.ext.set('archiveBuildTypes', ['debug', 'release'])

/** Keystore Settings, loaded from keystore.properties */
if (rootProject.file('keystore.properties').exists()) {
    def keystore = new Properties()
    keystore.load(new FileInputStream(rootProject.file('keystore.properties')))
    project.ext.set('debugKeystorePass',   keystore['debugKeystorePass'])
    project.ext.set('debugKeyAlias',       keystore['debugKeyAlias'])
    project.ext.set('debugKeyPass',        keystore['debugKeyPass'])
    project.ext.set('releaseKeystorePass', keystore['releaseKeystorePass'])
    project.ext.set('releaseKeyAlias',     keystore['releaseKeyAlias'])
    project.ext.set('releaseKeyPass',      keystore['releaseKeyPass'])
}

/** Modules */
allprojects {

    /** Runtime JAR files in the classpath should have the same version. */
    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin') {
                List<String> list = ['kotlin-stdlib', 'kotlin-stdlib-jdk7', 'kotlin-stdlib-jdk8', 'kotlin-stdlib-common']
                if (list.contains(requested.name)) {
                    details.useVersion "$kotlin_version"
                }
            }
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }
}

// rootProject > clean
tasks.register('clean', Delete) {
    delete rootProject.fileTree('build')
    delete project.fileTree('build')
}
