// root build.gradle
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.androidx.navigation.safeargs) apply false
}

/** Version Settings, loaded from file `version.properties` */
def version = new Properties()
version.load(new FileInputStream(rootProject.file('version.properties')))
project.ext.set('versionCode', new Integer(version['versionCode']))
project.ext.set('versionName', version['versionName'])

/* JitPack: use tag as versionName. */
if (System.env.JITPACK) {
    project.ext.set('version_name', System.env.VERSION)
}

/** Build Configurations */
project.ext.set('archiveBuildTypes', ['debug', 'release'])

/** Keystore Settings, loaded from keystore.properties */
if (rootProject.file('keystore.properties').exists()) {
    def keystore = new Properties()
    keystore.load(new FileInputStream(rootProject.file('keystore.properties')))
    project.ext.set('debugKeystorePass',   keystore['debugKeystorePass'])
    project.ext.set('debugKeyAlias',       keystore['debugKeyAlias'])
    project.ext.set('debugKeyPass',        keystore['debugKeyPass'])
    project.ext.set('releaseKeystorePass', keystore['releaseKeystorePass'])
    project.ext.set('releaseKeyAlias',     keystore['releaseKeyAlias'])
    project.ext.set('releaseKeyPass',      keystore['releaseKeyPass'])
}

/** Modules */
allprojects {

    /** Runtime JAR files in the classpath should have the same version. */
    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin') {
                List<String> list = ['kotlin-stdlib', 'kotlin-stdlib-jdk7', 'kotlin-stdlib-jdk8', 'kotlin-stdlib-common']
                if (list.contains(requested.name)) { details.useVersion libs.versions.kotlin.get() }
            }
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }
}

// rootProject > clean
tasks.register('clean', Delete) {
    delete rootProject.fileTree('build')
    delete project.fileTree('build')
}
