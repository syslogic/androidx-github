// root build.gradle

plugins {
    id 'com.android.application' version '7.2.2' apply false
    id 'androidx.navigation.safeargs' version '2.5.0' apply false
}

/** Version Settings, loaded from file `version.properties` */
def version = new Properties()
version.load(new FileInputStream(rootProject.file('version.properties')))
project.ext.set('applicationId',     version['applicationId'])
project.ext.set('versionName',       version['versionName'])
project.ext.set('versionCode',       new Integer(version['versionCode']))
project.ext.set('compileSdkVersion', new Integer(version['compileSdkVersion']))
project.ext.set('targetSdkVersion',  new Integer(version['targetSdkVersion']))
project.ext.set('minSdkVersion',     new Integer(version['minSdkVersion']))

/** Build Configurations */
project.ext.set('archiveBuildTypes', ['debug', 'release'])

/** Load API access-token from file `token.properties` */
if(rootProject.file('token.properties').exists()) {
    def apikeys = new Properties()
    apikeys.load(new FileInputStream(rootProject.file('token.properties')))
    project.ext.set('accessToken', apikeys['accessToken'])
} else {
    println "*** File `token.properties` is missing; the GitHub API may be rate-limited."
    println "*** The personal access token needs to be defined with EditTextPreference."
    project.ext.set('accessToken', "")
}

/** Modules */
allprojects {

    /** Runtime JAR files in the classpath should have the same version. */
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin') {
                def kotlinVersion = '1.7.10'
                List<String> list = ['kotlin-stdlib', 'kotlin-stdlib-jdk7', 'kotlin-stdlib-jdk8', 'kotlin-stdlib-common']
                if (list.contains(requested.name)) {
                    details.useVersion kotlinVersion
                }
            }
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

// rootProject > clean
task clean(type: Delete) {

    // delete build directories
    delete rootProject.buildDir
    delete project.buildDir

    // when task clean has finished
    doLast {

        // then recreate APK output directories
        mkdir("${project.buildDir}/outputs/apk")
        mkdir("${project.buildDir}/outputs/apk/debug")
        mkdir("${project.buildDir}/outputs/apk/release")
    }
}
